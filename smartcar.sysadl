Model SysADLModel ; package SmartCarDUD { dimension Temperatura dimension QuantidadeCombustivel unit Celsius { dimension = Temperatura } unit Litros { dimension = QuantidadeCombustivel } } Requirement ControleDeCarro ( 0 ) { text = "O sistema tem que monitorar o carro em movimento e acionar o freio quando a central eletronica do automovel identificar temperatura elevada no motor ou combustivel muito proximo ao insuficiente" derive LigarMotor , DesligarMotor ; Requirement LigarMotor ( 1 ) { text = "O sistema deve ser capaz de ligar o motor quando o dispositivo de acionamento do motor for ligado" derive IdentificarQuantidadeCombustivel , IdentificarTemperatura ; } Requirement DesligarMotor ( 2 ) { text = "O motor deve ser desligado em situacoes criticas" derive DesligarMotorCombustivelInsuficiente , DesligarMotorSuperaquecimento ; Requirement DesligarMotorCombustivelInsuficiente ( 7 ) { text = "O sistema devera desligar o motor apos 2 minutos do alerta de combustivel abaixo de 2 litros" } Requirement DesligarMotorSuperaquecimento ( 8 ) { text = "O sistema devera desligar o motor apos 2 minutos do alerta de superaquecimento do motor" } } } Requirement IdentificarTemperatura ( 3 ) { text = "O sistema deve ser capaz de identificar a temperatura do motor" derive PainelTemperatura ; } Requirement IdentificarQuantidadeCombustivel ( 4 ) { text = "O sistema deve ser capaz de identificar a quantidade de combustivel" derive PainelCombustivel ; } Requirement AlertarMotorSuperaquecido ( 5 ) { text = "O sistema deve ser capaz de alertar o motorista quando o motor superaquecer" derive ControleDeCarro.DesligarMotor.DesligarMotorSuperaquecimento ; } Requirement AlertarCombustivelInsuficiente ( 6 ) { text = "O sistema deve ser capaz de alertar o motorista quando a quantidade de combustivel tiver abaixo de 2 litros" derive ControleDeCarro.DesligarMotor.DesligarMotorCombustivelInsuficiente ; } Requirement PainelTemperatura ( 9 ) { text = "O sistema deve exibir no painel o status da temperatura do motor" derive AlertarMotorSuperaquecido ; } Requirement PainelCombustivel ( 10 ) { text = "O sistema deve exibir no painel a quantidade de combustivel" derive AlertarCombustivelInsuficiente ; } package SmartCarVLD { enum ComandosMotor { ligarMotor , desligarMotor } enum ComandosPainelTemperatura { ligarAlertaTemperatura , desligarAlertaTemperatura } value type Real { } value type String { } value type Boolean { } value type Int { } value type Void { } enum ComandosSensorTemperatura { ligarSensorTemperatura , desligarSensorTemperatura } value type TemperaturaCelsius { unit = SmartCarDUD.Celsius dimension = SmartCarDUD.Temperatura } value type QuantidadeCombustivel { unit = SmartCarDUD.Litros dimension = SmartCarDUD.QuantidadeCombustivel } enum ComandosSensorCombustivel { ligarSensorCombustivel , desligarSensorCombustivel } enum ComandosPainelCombustivel { ligarAlertaCombustivel , desligarAlertaCombustivel } } package SmartCarPTD { import SmartCarVLD ; port def ComandosMotorIPT { flow in ComandosMotor } port def ComandosMotorOPT { flow out ComandosMotor } port def ComandosPainelTemperaturaIPT { flow in ComandosPainelTemperatura   } port def ComandosPainelTemperaturaOPT { flow out ComandosPainelTemperatura   } port def ComandosSensorTemperaturaIPT { flow in ComandosSensorTemperatura  } port def ComandosSensorTemperaturaOPT { flow out ComandosSensorTemperatura  } port def ComandosSensorCombustivelIPT { flow in ComandosSensorCombustivel  } port def ComandosSensorCombustivelOPT { flow out ComandosSensorCombustivel  } port def ComandosPainelCombustivelIPT { flow in ComandosPainelCombustivel  } port def ComandosPainelCombustivelOPT { flow out ComandosPainelCombustivel  } port def QuantidadeCombustivelIPT { flow in QuantidadeCombustivel } port def QuantidadeCombustivelOPT { flow out QuantidadeCombustivel } port def CapturaTemperaturaIPT { flow in TemperaturaCelsius } port def CapturaTemperaturaOPT { flow out TemperaturaCelsius } } package SmartCarCND { import SmartCarPTD ; connector def ComandosMotorCN { participants : ~ comandoMotorIPT : ComandosMotorIPT ; ~ comandoMotorOTP : ComandosMotorOPT ; flows : ComandosMotor from comandoMotorIPT to comandoMotorOTP } connector def ComandosPainelTemperaturaCN { participants : ~ comandoPainelTemperaturaIPT : ComandosPainelTemperaturaIPT ; ~ comandoPainelTemperaturaOPT : ComandosPainelTemperaturaOPT ; flows : ComandosPainelTemperatura from comandoPainelTemperaturaIPT to comandoPainelTemperaturaOPT } connector def ComandosSensorTemperaturaCN { participants : ~ comandoSensorTemperaturaIPT : ComandosSensorTemperaturaIPT ; ~ comandoSensorTemperaturaOPT : ComandosSensorTemperaturaOPT ; flows : ComandosSensorTemperatura from comandoSensorTemperaturaIPT to comandoSensorTemperaturaOPT } connector def ComandosSensorCombustivelCN { participants : ~ comandoSensorCombustivelIPT : ComandosSensorCombustivelIPT ; ~ comandoSensorCombustivelOPT : ComandosSensorCombustivelOPT ; flows : ComandosSensorCombustivel from comandoSensorCombustivelIPT to comandoSensorCombustivelOPT port def CapturaTemperaturaIPT { flow in QuantidadeCombustivel } } connector def ComandosPainelCombustivelCN { participants : ~ comandoPainelCombustivelOPT : ComandosPainelCombustivelOPT ; ~ comandoPainelCombustivelIPT : ComandosPainelCombustivelIPT ; flows : ComandosPainelCombustivel from comandoPainelCombustivelIPT to comandoPainelCombustivelOPT } connector def QuantidadeCombustivelCN { participants : ~ quantidadeCombustivelIPT : QuantidadeCombustivelIPT ; ~ quantidadeCombustivelOPT : QuantidadeCombustivelOPT ; flows : QuantidadeCombustivel from quantidadeCombustivelIPT to quantidadeCombustivelOPT port def CapturaTemperaturaIPT { flow in QuantidadeCombustivel } } connector def CapturaTemperaturaCN { participants : ~ capturaTemperaturaIPT : CapturaTemperaturaIPT ; ~ quantidadeCombustivelOPT : CapturaTemperaturaOPT ; flows : TemperaturaCelsius from capturaTemperaturaIPT to quantidadeCombustivelOPT port def CapturaTemperaturaIPT { flow in QuantidadeCombustivel } } } package SmartCarCPD { import SmartCarPTD ; import SmartCarVLD ; boundary
	component def SensorTemperaturaCP { ports : comandoSensorTemperaturaITP : ComandosSensorTemperaturaIPT ; capturaTemperatura : CapturaTemperaturaOPT ; } boundary
	component def SensorCombustivelCP { ports : comandoSensorCombustivelIPT : ComandosSensorCombustivelIPT ; quantidadeCombustivelOPT : QuantidadeCombustivelOPT ; } boundary
	component def MotorCP { ports : comandoMotorIPT : ComandosMotorIPT ; } boundary
	component def PainelCP { ports : comandosPainelTemperaturaIPT : ComandosPainelTemperaturaIPT ; comandosPainelCombustivelIPT : ComandosPainelCombustivelIPT ; quantidadeCombustivel : QuantidadeCombustivelIPT ; capturaTemperatura : CapturaTemperaturaIPT ; }
	component def SistemaDeControleDeTemperaturaCP { ports : capturaTemperaturaIPT : CapturaTemperaturaIPT ; comandosPainelTemperaturaOPT : ComandosPainelTemperaturaOPT ;  capturaTemperaturaOPT : CapturaTemperaturaOPT ; comandoMotorOPT : ComandosMotorOPT ; }
	component def SistemaDeControleDeCombustivelCP { ports : comandosPainelCombustivelOPT : ComandosPainelCombustivelOPT ; quantidadeCombustivelOPT : QuantidadeCombustivelOPT ; quantidadeCombustivelIPT : QuantidadeCombustivelIPT ; comandoMotorOPT : ComandosMotorOPT ; }
	component def SistemaDeControleDeMotorCP { ports : comandoMotorIPT : ComandosMotorIPT ; comandoMotorOPT : ComandosMotorOPT ; comandoSensorCombustivelOPT : ComandosSensorCombustivelOPT ; comandoSensorTemperaturaOPT : ComandosSensorTemperaturaOPT ; } boundary
	component def DispositivoDePartidaCP { ports : comandoMotorOPT : ComandosMotorOPT ; } component def SistemaSmartCarCP { ports : temparaturaSensor : CapturaTemperaturaIPT ; temperaturaPainel : CapturaTemperaturaOPT ; comandoPainelTemperatura : ComandosPainelTemperaturaOPT ; comandosMotor1 : ComandosMotorOPT ; statusMotor : ComandosMotorIPT ; statusSensorTemperatura : ComandosSensorTemperaturaOPT ; statusSensorCombustivel : ComandosSensorCombustivelOPT ; qtdCombustivelSensor : QuantidadeCombustivelIPT ; qtdCombustivelPainel : QuantidadeCombustivelOPT ; comandoPainelCombustivel : ComandosPainelCombustivelOPT ; comandosMotor2 : ComandosMotorOPT ; comandosMotor3 : ComandosMotorOPT ; configuration { components : SistemaDeControleDeTemperatura : SistemaDeControleDeTemperaturaCP { using ports : capturaTemperaturaIPT : CapturaTemperaturaIPT ; comandosPainelTemperaturaOPT : ComandosPainelTemperaturaOPT ; capturaTemperaturaOPT : CapturaTemperaturaOPT ; comandoMotorOPT2 : ComandosMotorOPT ; } SistemaDeControleDeMotor : SistemaDeControleDeMotorCP { using ports : comandoMotorIPT : ComandosMotorIPT ; comandoMotorOPT1 : ComandosMotorOPT ; comandoSensorCombustivelOPT : ComandosSensorCombustivelOPT ; comandoSensorTemperaturaOPT : ComandosSensorTemperaturaOPT ; } SistemaDeControleDeCombustivelCP : SistemaDeControleDeCombustivelCP { using ports : comandosPainelCombustivelOPT : ComandosPainelCombustivelOPT ; quantidadeCombustivelOPT : QuantidadeCombustivelOPT ; quantidadeCombustivelIPT : QuantidadeCombustivelIPT ; comandoMotorOPT3 : ComandosMotorOPT ; } delegations : capturaTemperaturaIPT to temparaturaSensor capturaTemperaturaOPT to temperaturaPainel comandosPainelTemperaturaOPT to comandoPainelTemperatura comandoMotorIPT to statusMotor comandoSensorCombustivelOPT to statusSensorTemperatura comandoSensorTemperaturaOPT to statusSensorCombustivel comandoMotorOPT1 to comandosMotor1 quantidadeCombustivelIPT to qtdCombustivelSensor quantidadeCombustivelOPT to qtdCombustivelPainel comandosPainelCombustivelOPT to comandoPainelCombustivel comandoMotorOPT2 to comandosMotor2 comandoMotorOPT3 to comandosMotor3 } } activity def SistemaDeControleDeTemperaturaAC ( temperatura : TemperaturaCelsius ) : ( comandoMotor : ComandosMotor , alertaTemperatura : ComandosPainelTemperatura , temperaturaPainel : TemperaturaCelsius ) { body { actions : AlertaDeTemperaturaAN : AlertaDeTemperaturaAN { using pins : temperatura1 : TemperaturaCelsius ; } ComunicacaoDesligamentoMotorAN : ComunicacaoDesligamentoMotorTemperaturaAN { using pins : temperatura2 : TemperaturaCelsius ; } MostrarTemperaturaPainelAN : MostrarTemperaturaPainelAN { using pins : temperatura3 : TemperaturaCelsius ; } delegate temperatura to temperatura1 delegate alertaTemperatura to AlertaDeTemperaturaAN delegate temperatura to temperatura2 delegate comandoMotor to ComunicacaoDesligamentoMotorAN delegate temperatura to temperatura3 delegate temperaturaPainel to MostrarTemperaturaPainelAN } } activity def SistemaDeControleDeCombustivelAC ( qtdCombustivel : QuantidadeCombustivel ) : ( comandoMotor : ComandosMotor , alertaQtdCombustivel : ComandosPainelCombustivel , qtdCombustivelPainel : QuantidadeCombustivel ) { body { actions : ComunicacaoDesligamentoMotorCombustivelAN : ComunicacaoDesligamentoMotorCombustivelAN { using pins : qtdCombustivel1 : QuantidadeCombustivel ; } AlertaDeCombustivelAN : AlertaDeCombustivelAN { using pins : qtdCombustivel2 : QuantidadeCombustivel ; } MostrarQtdCombustivelAN : MostrarQtdCombustivelAN { using pins : qtdCombustivel3 : QuantidadeCombustivel ; } delegate qtdCombustivel to qtdCombustivel1 delegate comandoMotor to ComunicacaoDesligamentoMotorCombustivelAN delegate qtdCombustivel to qtdCombustivel2 delegate alertaQtdCombustivel to AlertaDeCombustivelAN delegate qtdCombustivel to qtdCombustivel3 delegate qtdCombustivelPainel to MostrarQtdCombustivelAN } } activity def SistemaDeControleDeMotorCP ( comandoMotor : ComandosMotor ) ( dispositivo : Boolean ) : ( acionarMotor : ComandosMotor , acionarSensorCombustivel : ComandosSensorCombustivel , acionarSensorTemperatura : ComandosSensorTemperatura ) { body { actions : ComandosMotor : ComandosMotorAN { using pins : comandoMotor1 : Boolean ; } ComandosSensorCombustivelAN : ComandosSensorCombustivelAN { using pins : comandoMotor2 : ComandosMotor ; } ComandosSensorTemperaturaAN : ComandosSensorTemperaturaAN { using pins : comandoMotor3 : ComandosMotor ; } AcionarMotor : AcionarMotor { using pins : dispositivo : Boolean ; } delegate comandoMotor to comandoMotor1 delegate acionarMotor to ComandosMotor delegate comandoMotor to comandoMotor2 delegate acionarSensorCombustivel to ComandosSensorCombustivelAN delegate comandoMotor to comandoMotor3 delegate acionarSensorTemperatura to ComandosSensorTemperaturaAN delegate dispositivo to dispositivo delegate acionarMotor to AcionarMotor } } action def MostrarTemperaturaPainelAN ( temperatura : TemperaturaCelsius ) : TemperaturaCelsius { constraint : post-condition MostrarTemperaturaPainelEQ delegate temperatura to temperaturaEntrada delegate MostrarTemperaturaPainelAN to temperaturaSaida } action def AlertaDeTemperaturaAN ( temperatura : TemperaturaCelsius ) : ComandosPainelTemperatura { constraint : pre-condition VerificarNotificacaoTemperaturaPainelEQ delegate temperatura to temperatura delegate AlertaDeTemperaturaAN to cmdPainelTemp } action def ComunicacaoDesligamentoMotorTemperaturaAN ( temperatura : TemperaturaCelsius ) : ComandosMotor { constraint : pre-condition VerificarNotificacaoTemperaturaMotorEQ delegate temperatura to temperatura delegate ComunicacaoDesligamentoMotorTemperaturaAN to cmdMotor } constraint MostrarTemperaturaPainelEQ ( temperaturaEntrada : TemperaturaCelsius ) : ( temperaturaSaida : TemperaturaCelsius ) { } constraint VerificarNotificacaoTemperaturaPainelEQ ( temperatura : TemperaturaCelsius ) : ( cmdPainelTemp : ComandosPainelTemperatura ) { } constraint VerificarNotificacaoTemperaturaMotorEQ ( temperatura : TemperaturaCelsius ) : ( cmdMotor : ComandosMotor ) { } action def MostrarQtdCombustivelAN ( qtdCombustivel : QuantidadeCombustivel ) : QuantidadeCombustivel { constraint : post-condition MostrarCombustivelPainelEQ delegate qtdCombustivel to qtdCombustivelEntrada delegate MostrarQtdCombustivelAN to qtdCombustivelSaida } action def AlertaDeCombustivelAN ( qtdCombustivel : QuantidadeCombustivel ) : ComandosPainelCombustivel { constraint : pre-condition VerificarNotificacaoCombustivelPainelEQ delegate qtdCombustivel to qtdCombustivel delegate AlertaDeCombustivelAN to cmdPainelQtdCombustivel } action def ComunicacaoDesligamentoMotorCombustivelAN ( qtdCombustivel : QuantidadeCombustivel ) : ComandosMotor { constraint : pre-condition verificarNotificacaoCombustivelMotorEQ delegate ComunicacaoDesligamentoMotorCombustivelAN to cmdMotor delegate qtdCombustivel to qtdCombustivel } action def ComandosSensorCombustivelAN ( comandoMotor : ComandosMotor ) : ComandosSensorCombustivel { constraint : post-condition NotificarSensorCombustivelEQ delegate comandoMotor to cmdMotor delegate ComandosSensorCombustivelAN to cmdSensorCombustivel } action def ComandosSensorTemperaturaAN ( comandoMotor : ComandosMotor ) : ComandosSensorTemperatura { constraint : pre-condition NotificarSensorTemperaturaEQ delegate comandoMotor to cmdMotor delegate ComandosSensorTemperaturaAN to cmdSensorTemperatura } action def ComandosMotorAN ( comandoMotor : Boolean ) : ComandosMotor { constraint : pre-condition NotificarMotorEQ delegate comandoMotor to cmdMotorEntrada delegate ComandosMotorAN to cmdMotorSaida } action def AcionarMotor ( dispositivo : Boolean ) : ComandosMotor { constraint : pre-condition NotificarMotorDispositivoEQ delegate AcionarMotor to cmdMotor delegate dispositivo to dispositivo } constraint MostrarCombustivelPainelEQ ( qtdCombustivelEntrada : QuantidadeCombustivel ) : ( qtdCombustivelSaida : QuantidadeCombustivel ) { } constraint VerificarNotificacaoCombustivelPainelEQ ( qtdCombustivel : QuantidadeCombustivel ) : ( cmdPainelQtdCombustivel : ComandosPainelCombustivel ) { } constraint verificarNotificacaoCombustivelMotorEQ ( qtdCombustivel : QuantidadeCombustivel ) : ( cmdMotor : ComandosMotor ) { } constraint NotificarSensorCombustivelEQ ( cmdMotor : ComandosMotor ) : ( cmdSensorCombustivel : ComandosSensorCombustivel ) { } constraint NotificarSensorTemperaturaEQ ( cmdMotor : ComandosMotor ) : ( cmdSensorTemperatura : ComandosSensorTemperatura ) { } constraint NotificarMotorEQ ( cmdMotorEntrada : ComandosMotor ) : ( cmdMotorSaida : ComandosMotor ) { } constraint NotificarMotorDispositivoEQ ( dispositivo : Boolean ) : ( cmdMotor : ComandosMotor ) { } }