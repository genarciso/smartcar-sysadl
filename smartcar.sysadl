Model SysADLModel ; package SmartCarDUD { dimension Temperatura dimension QuantidadeCombustivel unit Celsius { dimension = Temperatura } unit Litros { dimension = QuantidadeCombustivel } } Requirement ControleDeCarro ( 0 ) { text = "O sistema tem que monitorar o carro em movimento e acionar o freio quando a central eletronica do automovel identificar temperatura elevada no motor ou combustivel muito proximo ao insuficiente" derive LigarMotor , DesligarMotor ; Requirement LigarMotor ( 1 ) { text = "O sistema deve ser capaz de ligar o motor quando o dispositivo de acionamento do motor for ligado" derive IdentificarQuantidadeCombustivel , IdentificarTemperatura ; } Requirement DesligarMotor ( 2 ) { text = "O motor deve ser desligado em situacoes criticas" derive DesligarMotorCombustivelInsuficiente , DesligarMotorSuperaquecimento ; Requirement DesligarMotorCombustivelInsuficiente ( 7 ) { text = "O sistema devera desligar o motor apos 2 minutos do alerta de combustivel abaixo de 2 litros" } Requirement DesligarMotorSuperaquecimento ( 8 ) { text = "O sistema devera desligar o motor apos 2 minutos do alerta de superaquecimento do motor" } } } Requirement IdentificarTemperatura ( 3 ) { text = "O sistema deve ser capaz de identificar a temperatura do motor" derive PainelTemperatura ; } Requirement IdentificarQuantidadeCombustivel ( 4 ) { text = "O sistema deve ser capaz de identificar a quantidade de combustivel" derive PainelCombustivel ; } Requirement AlertarMotorSuperaquecido ( 5 ) { text = "O sistema deve ser capaz de alertar o motorista quando o motor superaquecer" derive ControleDeCarro.DesligarMotor.DesligarMotorSuperaquecimento ; } Requirement AlertarCombustivelInsuficiente ( 6 ) { text = "O sistema deve ser capaz de alertar o motorista quando a quantidade de combustivel tiver abaixo de 2 litros" derive ControleDeCarro.DesligarMotor.DesligarMotorCombustivelInsuficiente ; } Requirement PainelTemperatura ( 9 ) { text = "O sistema deve exibir no painel o status da temperatura do motor" derive AlertarMotorSuperaquecido ; } Requirement PainelCombustivel ( 10 ) { text = "O sistema deve exibir no painel a quantidade de combustivel" derive AlertarCombustivelInsuficiente ; } package SmartCarVLD { enum ComandosMotor { ligarMotor , desligarMotor } enum ComandosPainel { ligarAlertaTemperatura , desligarAlertaTemperatura , ligarAlertaCombustivel , desligarAlertaCombustivel } value type Real { } value type String { } value type Boolean { } value type Int { } value type Void { } enum ComandosSensorTemperatura { ligarSensorTemperatura , desligarSensorTemperatura } value type TemepraturaCelsius { unit = SmartCarDUD.Celsius dimension = SmartCarDUD.Temperatura } value type QuantidadeCombustivel { unit = SmartCarDUD.Litros dimension = SmartCarDUD.QuantidadeCombustivel } enum ComandosSensorCombustivel { ligarSensorCombustivel , desligarSensorCombustivel } } package SmartCarPTD { import SmartCarVLD ; port def ComandosMotorIPT { flow in ComandosMotor } port def ComandosMotorOPT { flow out ComandosMotor } port def ComandosPainelIPT { flow in ComandosPainel property quantidadeCombustivel : QuantidadeCombustivel ; property temperaturaMotor : TemepraturaCelsius ; } port def ComandosPainelOPT { flow out ComandosPainel property quantidadeCombustivel : QuantidadeCombustivel ; property temperaturaMotor : TemepraturaCelsius ; } port def ComandosSensorTemperaturaIPT { flow in ComandosSensorTemperatura property capturaTemperatura : TemepraturaCelsius ; } port def ComandosSensorTemperaturaOPT { flow out ComandosSensorTemperatura property capturaTemperatura : TemepraturaCelsius ; } port def ComandosSensorCombustivelIPT { flow in ComandosSensorCombustivel property capturaCombustivel : ComandosSensorCombustivel ; } port def ComandosSensorCombustivelOPT { flow out ComandosSensorCombustivel property capturaCombustivel : ComandosSensorCombustivel ; } } package SmartCarCND { import SmartCarPTD ; connector def ComandosMotorCN { participants : ~ comandoMotorIPT : ComandosMotorIPT ; ~ comandoMotorOTP : ComandosMotorOPT ; flows : ComandosMotor from comandoMotorIPT to comandoMotorOTP } connector def ComandosPainelCN { participants : ~ comandoPainelIPT : ComandosPainelIPT ; ~ comandoPainelOPT : ComandosPainelOPT ; flows : ComandosPainel from comandoPainelIPT to comandoPainelOPT } connector def ComandosSensorTemperaturaCN { participants : ~ comandoSensorTemperaturaIPT : ComandosSensorTemperaturaIPT ; ~ comandoSensorTemperaturaOPT : ComandosSensorTemperaturaOPT ; flows : ComandosSensorTemperatura from comandoSensorTemperaturaIPT to comandoSensorTemperaturaOPT } connector def ComandosSensorCombustivelCN { participants : ~ comandoSensorCombustivelIPT : ComandosSensorCombustivelIPT ; ~ comandoSensorCombustivelOPT : ComandosSensorCombustivelOPT ; flows : ComandosSensorCombustivel from comandoSensorCombustivelIPT to comandoSensorCombustivelOPT } } package SmartCarCPD { import SmartCarPTD ; boundary
	component def SensorTemperatura { ports : comandoSensorTemperaturaITP : ComandosSensorTemperaturaIPT ; comandoSensortemperatura : ComandosSensorTemperaturaOPT ; } boundary
	component def SensorCombustivel { ports : comandoSensorCombustivelIPT : ComandosSensorCombustivelIPT ; comandosSensorCombustivelOPT : ComandosSensorCombustivelOPT ; } boundary
	component def Motor { ports : comandoMotorIPT : ComandosMotorIPT ; } boundary
	component def Painel { ports : comandosPainelIPT : ComandosPainelIPT ; }
	component def SistemaDeControleDeTemperatura { ports : comandoSensorTemperaturaIPT : ComandosSensorTemperaturaIPT ; comandosPainelOPT : ComandosPainelOPT ; comandosSensorTemperaturaOPT : ComandosSensorTemperaturaOPT ; }
	component def SistemaDeControleDeCombustivel { ports : comandosPainelOPT : ComandosPainelOPT ; comandosSensorCombustivel : ComandosSensorCombustivelIPT ; comandoSensorCombustivelIPT : ComandosSensorCombustivelIPT ; }
	component def SistemaDeControleDeMotor { ports : comandoMotorIPT : ComandosMotorIPT ; comandoMotorOPT : ComandosMotorOPT ; comandoSensorCombustivelOPT : ComandosSensorCombustivelOPT ; comandoSensorTemperaturaOPT : ComandosSensorTemperaturaOPT ; } boundary
	component def DispositivoDePartida { ports : comandoMotorOPT : ComandosMotorOPT ; }
	component def sistemaCentralSmartCar { configuration { } } }